{"name":"Period","tagline":"Time range made easy in PHP","body":"Period\r\n============\r\n\r\n[![Author](http://img.shields.io/badge/author-@nyamsprod-blue.svg?style=flat-square)](https://twitter.com/nyamsprod)\r\n[![Latest Version](https://img.shields.io/github/release/nyamsprod/Period.svg?style=flat-square)](https://github.com/nyamsprod/Period/releases)\r\n[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](LICENSE.md)<br>\r\n[![Build Status](https://img.shields.io/travis/nyamsprod/Period/master.svg?style=flat-square)](https://travis-ci.org/nyamsprod/Period)\r\n[![Coverage Status](https://img.shields.io/scrutinizer/coverage/g/nyamsprod/Period.svg?style=flat-square)](https://scrutinizer-ci.com/g/nyamsprod/Period/code-structure)\r\n[![Quality Score](https://img.shields.io/scrutinizer/g/nyamsprod/Period.svg?style=flat-square)](https://scrutinizer-ci.com/g/nyamsprod/Period)\r\n[![Total Downloads](https://img.shields.io/packagist/dt/bakame/period.svg?style=flat-square)](https://packagist.org/packages/bakame/period)\r\n\r\nThis class is based on [Resolving Feature Envy in the Domain](http://verraes.net/2014/08/resolving-feature-envy-in-the-domain/) by Mathias Verraes and helps resolve many recurrent issues around Date range selection and usage.\r\n\r\nThis package is compliant with [PSR-2], and [PSR-4].\r\n\r\n[PSR-2]: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md\r\n[PSR-4]: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md\r\n\r\nSystem Requirements\r\n-------\r\n\r\nYou need **PHP >= 5.3.0** to use `Period` but the latest stable version of PHP is recommended.\r\n\r\nInstall\r\n-------\r\n\r\nInstall `Period` using Composer.\r\n\r\n```json\r\n{\r\n    \"require\": {\r\n        \"bakame/period\": \"*\"\r\n    }\r\n}\r\n```\r\n#### Going Solo\r\n\r\nYou can also use `Period` without using Composer by downloading the library and registing an autoloader function:\r\n\r\n```php\r\nspl_autoload_register(function ($class) {\r\n    $prefix = 'Period\\\\';\r\n    $base_dir = __DIR__ . '/src/';\r\n    $len = strlen($prefix);\r\n    if (strncmp($prefix, $class, $len) !== 0) {\r\n        // no, move to the next registered autoloader\r\n        return;\r\n    }\r\n    $relative_class = substr($class, $len);\r\n    $file = $base_dir . str_replace('\\\\', '/', $relative_class) . '.php';\r\n    if (file_exists($file)) {\r\n        require $file;\r\n    }\r\n});\r\n```\r\n\r\nOr, use any other [PSR-4](http://www.php-fig.org/psr/psr-4/) compatible autoloader.\r\n\r\nUsage\r\n-------\r\n\r\n#### Period::__construct($start, $end)\r\n\r\nBoth `$start` and `$end` parameters are `DateTime` objects or strings parsable by the `DateTime` constructor. They represent the range endpoints \r\n\r\n- The `$start` endpoint represent **the starting included endpoint**.\r\n- The `$end` value represents **the ending excluded endpoint**. `$end` MUST BE greater or equals to `$start` or the instantiation will failed. \r\n\r\n\r\n```php\r\nuse Period\\Period;\r\n\r\n$period = new Period('2012-04-01 08:30:25', new DateTime('2013-09-04 12:35:21'));\r\n```\r\n\r\nTo ease instantiation the class comes with many named constructors to ease its instantiation:\r\n\r\n#### Period::createFromDuration($datetime, $interval)\r\n\r\nreturns a `Period` object which starts at `$datetime` with a duration equals to `$interval`\r\n\r\n- The `$datetime` parameter is a `DateTime` object or a string parsable by the `DateTime` constructor;\r\n- The `$interval` parameter is a `DateInterval` or a string parsable by the `DateInterval::createFromDateString` method.\r\n\r\n```php\r\nuse Period\\Period;\r\n\r\n$period  = Period::createFromDuration('2012-04-01 08:30:25', '1 DAY');\r\n$period2 = Period::createFromDuration('2012-04-01 08:30:25', new DateInterval('P1D'));\r\n```\r\n\r\n#### Period::createFromWeek($year, $week)\r\n\r\nreturns a `Period` object with a duration of 1 week for a given year and week.\r\n\r\n- The `$year` parameter is a valid year;\r\n- The `$week` parameter is a selected week (between 1 to 53);\r\n\r\n```php\r\nuse Period\\Period;\r\n\r\n$period  = Period::createFromWeek(2013, 23);\r\n//this period represents the 23rd week of 2013\r\n```\r\n\r\n#### Period::createFromMonth($year, $month)\r\n\r\nreturns a `Period` object with a duration of 1 month for a given year and month. \r\n\r\n- The `$year` parameter is a valid year;\r\n- The `$month` parameter is a selected month (between 1 to 12);\r\n\r\n```php\r\nuse Period\\Period;\r\n\r\n$period  = Period::createFromMonth(2013, 7);\r\n//this period represents the month of July 2013\r\n```\r\n\r\n#### Period::createFromQuarter($year, $quarter)\r\n\r\nreturns a `Period` object with a duration of 3 months for a given year and quarter. \r\n\r\n- The `$year` parameter is a valid year;\r\n- The `$quarter` parameter is a selected quarter (between 1 to 4);\r\n\r\n```php\r\nuse Period\\Period;\r\n\r\n$period  = Period::createFromQuarter(2013, 2);\r\n//this period represents the second quarter of 2013\r\n```\r\n\r\n#### Period::createFromSemester($year, $semester)\r\n\r\nreturns a `Period` object with a duration of 6 months for a given year and semester. \r\n\r\n- The `$year` parameter is a valid year;\r\n- The `$semester` parameter is a selected semester (between 1 and 2);\r\n\r\n```php\r\nuse Period\\Period;\r\n\r\n$period  = Period::createFromSemester(2011, 1);\r\n//this period represents the first semester of 2013\r\n```\r\n\r\n#### Period::createFromYear($year)\r\n\r\nreturns a `Period` object with a duration of 1 year for a given year.\r\n\r\n- The `$year` parameter is a valid year;\r\n\r\n```php\r\nuse Period\\Period;\r\n\r\n$period  = Period::createFromYear(1971);\r\n//this period represents the year 1971\r\n```\r\n\r\nOnce you have a instantiated `Period` object you can access its property using getter methods:\r\n\r\n#### Period::getStart()\r\n\r\nReturns the starting **included** endpoint as a `DateTime`.\r\n\r\n#### Period::getEnd();\r\n\r\nReturns the ending **excluded** endpoint as a `DateTime`.\r\n\r\n#### Period::getDuration()\r\n\r\nReturns the period duration as a `DateInterval` object.\r\n\r\n#### Period::getRange($interval)\r\n\r\nReturns a `DatePeriod` object that lists `DateTime` objects inside the period separeted by the given `$interval`. \r\n\r\nThe `$interval` parameter is a `DateInterval` or a string parsable by the `DateInterval::createFromDateString` method.\r\n\r\n```php\r\nuse Period\\Period;\r\n\r\n$period  = Period::createFromYear(1971);\r\nforeach ($period->getRange('1 MONTH') as $datetime) {\r\n    echo $datetime->format('Y-m-d H:i:s');\r\n}\r\n//will iterate 12 times\r\n```\r\n\r\n#### Period::contains($datetime)\r\n\r\nTells whether a `$datetime` is contained within the `Period` or not.\r\n\r\nThe `$datetime` parameter is a `DateTime` object or a string parsable by the `DateTime` constructor\r\n\r\n```php\r\nuse Period\\Period;\r\n\r\n$period = Period::createFromMonth(1983, 4);\r\n$period->getStart(); //returns DateTime('1983-04-01');\r\n$period->getEnd(); //returns DateTime('1983-05-01');\r\n$period->contains('1983-04-15'); //returns true;\r\n$period->contains($period->getEnd()); //returns false because of `getEnd` definition;\r\n```\r\n\r\n#### Period::overlaps(Period $period)\r\n\r\nTells whether two `Period` objects overlap each other or not.\r\n\r\n```php\r\nuse Period\\Period;\r\n\r\n$period1 = Period::createFromMonth(2014, 3);\r\n$period2 = Period::createFromMonth(2014, 4);\r\n$period3 = Period::createFromDuration('2014-03-15', '3 WEEKS');\r\n\r\n$period1->overlaps($period2); //return false\r\n$period1->overlaps($period3); //return true\r\n$period2->overlaps($period3); //return true\r\n```\r\n\r\nThe `Period` object is an Immutable Value Object so any change to its property returns a new `Period` class. \r\n\r\n#### Period::startingOn($datetime)\r\n\r\nReturns a new `Period` object with an updated starting included endpoint.\r\n\r\nThe `$datetime` parameter is a `DateTime` object or a string parsable by the `DateTime` constructor\r\n\r\n```php\r\nuse Period\\Period;\r\n\r\n$period    = Period::createFromMonth(2014, 3);\r\n$newPeriod = $period->startingOn('2014-02-01');\r\n$period->getStart(); //returns DateTime('2014-03-01');\r\n$newPeriod->getStart(); //returns DateTime('2014-02-01');\r\n// $period->getEnd() equals $newPeriod->getEnd();\r\n```\r\n\r\n#### Period::endingOn($datetime)\r\n\r\nReturns a new `Period` object with an updated excluded endpoint.\r\n\r\nThe `$datetime` parameter is a `DateTime` object or a string parsable by the `DateTime` constructor\r\n\r\n```php\r\nuse Period\\Period;\r\n\r\n$period    = Period::createFromMonth(2014, 3);\r\n$newPeriod = $period->EndingOn('2014-03-16');\r\n$period->getEnd(); //returns DateTime('2014-04-01');\r\n$newPeriod->getEnd(); //returns DateTime('2014-03-16');\r\n// $period->getStart() equals $newPeriod->getStart();\r\n```\r\n\r\n#### Period::withDuration($interval)\r\n\r\nReturns a new `Period` object by updating its duration. The excluded endpoint is updated, the starting included endpoint remains the same.\r\n\r\nThe `$interval` parameter is a `DateInterval` or a string parsable by the `DateInterval::createFromDateString` method.\r\n\r\n```php\r\nuse Period\\Period;\r\n\r\n$period    = Period::createFromMonth(2014, 3);\r\n$newPeriod = $period->withDuration('2 WEEKS');\r\n$period->getEnd(); //returns DateTime('2014-04-01');\r\n$newPeriod->getEnd(); //returns DateTime('2014-03-16');\r\n// $period->getStart() equals $newPeriod->getStart();\r\n```\r\n\r\n#### Period::merge(Period $period)\r\n\r\nMerge two `Period` objects by returning a new `Period` object which starting endpoint is the smallest and the excluded endpoint is the biggest between both objects.\r\n\r\n```php\r\n\r\nuse Period\\Period;\r\n\r\n$period    = Period::createFromSemester(2012, 1);\r\n$altPeriod = Period::createFromWeek(2013, 4);\r\n$newPeriod = $period->merge($altPeriod); \r\n// $newPeriod->getStart() equals $period->getStart();\r\n// $newPeriod->getEnd() equals $altPeriod->getEnd();\r\n```\r\n\r\nTesting\r\n-------\r\n\r\n``` bash\r\n$ phpunit\r\n```\r\n\r\nContributing\r\n-------\r\n\r\nPlease see [CONTRIBUTING](CONTRIBUTING.md) for details.\r\n\r\nCredits\r\n-------\r\n\r\n- [ignace nyamagana butera](https://github.com/nyamsprod)\r\n- [All Contributors](https://github.com/nyamsprod/Bakame.Tools/graphs/contributors)","google":"UA-1200654-50","note":"Don't delete this file! It's used internally to help with page regeneration."}